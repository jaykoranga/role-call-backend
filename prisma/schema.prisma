generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id          Int           @id @default(autoincrement())
  user_id     Int
  permissions String?       @db.VarChar(255)
  status      admins_status @default(active)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @default(now()) @db.Timestamp(0)
  users       users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_user")

  @@index([user_id], map: "fk_admin_user")
}

model students {
  id              Int             @id @default(autoincrement())
  user_id         Int
  course_id       Int?
  semester_id     Int?
  class_id        Int?
  enrollment_date DateTime?       @db.Date
  status          students_status @default(active)
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  updated_at      DateTime?       @default(now()) @db.Timestamp(0)
  users           users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_user")

  @@index([user_id], map: "fk_student_user")
}

model teachers {
  id               Int             @id @default(autoincrement())
  user_id          Int
  department       String?         @db.VarChar(100)
  class_teacher_id Int?
  status           teachers_status @default(active)
  created_at       DateTime?       @default(now()) @db.Timestamp(0)
  updated_at       DateTime?       @default(now()) @db.Timestamp(0)
  users            users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teacher_user")

  @@index([user_id], map: "fk_teacher_user")
}

model users {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  email      String       @unique(map: "email") @db.VarChar(150)
  password   String       @db.VarChar(255)
  role       users_role   @default(student)
  status     users_status @default(active)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  admins     admins[]
  students   students[]
  teachers   teachers[]
}

model courses {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(150)
  duration   Int
  isActive   Boolean     @default(true)
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @db.Timestamp(0)
  semesters  semesters[]
}

model semesters {
  id         Int       @id @default(autoincrement())
  courseId   Int
  name       String    @db.VarChar(100)
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  isActive   Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  courses    courses   @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_semester_course")

  @@index([courseId], map: "fk_semester_course")
}

enum admins_status {
  active
  inactive
}

enum teachers_status {
  active
  inactive
}

enum users_role {
  student
  teacher
  admin
}

enum users_status {
  active
  inactive
}

enum students_status {
  active
  inactive
}
